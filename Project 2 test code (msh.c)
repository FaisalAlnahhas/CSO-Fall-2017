//Faisal Alnahhas
//UT Arlington - Fall 2017
//OS - Project 2 Writing a Shell
//  msh.c
//
//
//  Created by Faisal Alnahhas on 10/8/17.
//

// The MIT License (MIT)
//
// Copyright (c) 2016, 2017 Trevor Bakker
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#define _GNU_SOURCE

#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <signal.h>

#define WHITESPACE " \t\n"      // We want to split our command line up into tokens
// so we need to define what delimits our tokens.
// In this case  white space
// will separate the tokens on our command line

#define MAX_COMMAND_SIZE 255    // The maximum command-line size

//Changing it to 10 per requirement of project
#define MAX_NUM_ARGUMENTS 10     // Mav shell only supports five arguments

void ls()
{
    pid_t child_pid = fork();
    int status;
    if (child_pid == 0)
    {
        execl("/bin/ls", "ls", NULL); //using code from github
        exit (EXIT_SUCCESS); //indicating successful completion of task
    }
    
    waitpid(child_pid, &status, 0);
}

int cd(char *path)
{
    //for any path passed to cd, insert / at beginning and concatenate it with the rest of the path
    //obtained using getcwd, then use chdir to change directory to the full path
    char cwd[255];
    getcwd(cwd, sizeof(cwd));
    strcat(cwd, "/");
    strcat(cwd, path);
    chdir(cwd);
    return 0;
}

int cddot()
{
    
    //for this function i am taking the cwd and checking the string from its end until i find a /, since there is no
    //back slash at the end of a path. When I see one I use n to make a copy of the old cwd to a new cwd that stops at n
    //without including the last portion of the path.
    char cwd[255];
    getcwd(cwd, sizeof(cwd));
    char reduced_path[255];
    
    long n = strlen(cwd);
    
    while(n!=0)
    {
        if (cwd[n] == '/')
        {
            break;
        }
        else
        {
            n--;
        }
    }
    strncpy(reduced_path, cwd, n);
    chdir(reduced_path);
    return 0;
}


int main()
{
    
    char * cmd_str = (char*) malloc( MAX_COMMAND_SIZE );
    
    while( 1 )
    {
        // Print out the msh prompt
    top:        printf ("msh> ");
        
        // Read the command from the commandline.  The
        // maximum command that will be read is MAX_COMMAND_SIZE
        // This while command will wait here until the user
        // inputs something since fgets returns NULL when there
        // is no input
        
        //no need to use while to wait for user input because we're okay with empty input
        fgets (cmd_str, MAX_COMMAND_SIZE, stdin);
        
        if (!strcmp(cmd_str, "\n"))
        {
            goto top; //if user just hits enter with typing anything go back to prompting msh>
        }
        
        /* Parse input */
        char *token[MAX_NUM_ARGUMENTS];
        
        int   token_count = 0;
        
        // Pointer to point to the token
        // parsed by strsep
        char *arg_ptr;
        
        char *working_str  = strdup( cmd_str );
        
        // we are going to move the working_str pointer so
        // keep track of its original value so we can deallocate
        // the correct amount at the end
        char *working_root = working_str;
        
        // Tokenize the input stringswith whitespace used as the delimiter
        while ( ( (arg_ptr = strsep(&working_str, WHITESPACE ) ) != NULL) &&
               (token_count<MAX_NUM_ARGUMENTS))
        {
            token[token_count] = strndup( arg_ptr, MAX_COMMAND_SIZE );
            if( strlen( token[token_count] ) == 0 )
            {
                token[token_count] = NULL;
            }
            token_count++;
        }
        
        // Now print the tokenized input as a debug check
        // \TODO Remove this code and replace with your shell functionality
        
        int token_index  = 0;
        
        int status;
        
        if((!strcmp(token[token_index], "exit")) || (!strcmp(token[token_index], "quit")))
        {
            status = 0;
            exit(status);
        }
        
        else if (!strcmp(token[token_index], "ls"))
        {
            ls();
        }
        
        else if (!strcmp(token[token_index], "cd"))
        {
            cd(token[token_index + 1]);
        }
        
        else if (!strcmp(token[token_index], "cd.."))
        {
            cddot();
        }
        
        
        /*  for( token_index = 0; token_index < token_count; token_index ++ )
         {
         printf("token[%d] = %s\n", token_index, token[token_index] );
         }
         */
        free( working_root );
        
    }
    return 0;
}

